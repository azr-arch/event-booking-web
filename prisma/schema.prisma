// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String  @unique
  password      String
  role          Role    @default(ATTENDEE)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  accounts      Account[]
  sessions      Session[]

  createdEvents Event[] @relation("EventCreator") // Events created by ORGANIZER or ADMIN
  orders        Order[] // Orders placed by user (ATTENDEE)
  attending     UserEvent[] // Events user is currently attending
  
  // @@index([email])
}

model Account {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime

  location      Location  @relation(fields: [locationId], references: [id])
  locationId    String   @db.ObjectId

  creator       User  @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId     String  @db.ObjectId

  tickets       Ticket[]  // Tickets available for event
  attendees     UserEvent[]

  images        String[]    // Urls to event images

  orders        Order[]

  // status        EventStatus @default(DRAFT)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  @@index([startDate])
  // @@index([status])
}

model Ticket {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  event           Event @relation(fields: [eventId], references: [id])
  eventId         String @db.ObjectId
  type            String   // e.g. "VIP", "General"
  price           Float
  quantityAvailable    Int
  startSaleDate   DateTime
  endSaleDate     DateTime

  orders          TicketOrder[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.ObjectId
  event         Event         @relation(fields: [eventId], references: [id])
  eventId       String        @db.ObjectId
  tickets       TicketOrder[]
  totalAmount   Float
  // paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
}

// Embedded document (for MongoDB) within Order
model TicketOrder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String @db.ObjectId
  quantity Int

  order     Order @relation(fields: [orderId], references: [id])  
  orderId   String  @db.ObjectId
}

model Location {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  latitude  Float?
  longitude Float?
  events    Event[]
}

// Join table for User <-> Event (many-to-many with role)
model UserEvent {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String @db.ObjectId
  role     Role   @default(ATTENDEE) // e.g., ORGANIZER, ATTENDEE

  @@unique([userId, eventId]) // Prevent duplicate entries
}